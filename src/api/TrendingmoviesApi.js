/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Trendingmovies from '../model/Trendingmovies';

/**
* Trendingmovies service.
* @module api/TrendingmoviesApi
* @version 1.0.0
*/
export default class TrendingmoviesApi {

    /**
    * Constructs a new TrendingmoviesApi. 
    * @alias module:api/TrendingmoviesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~createtrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trendingmovies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Trendingmovies} trendingmovies data to be created
     * @param {module:api/TrendingmoviesApi~createtrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trendingmovies}
     */
    createtrendingmovies(trendingmovies, callback) {
      let postBody = trendingmovies;
      // verify the required parameter 'trendingmovies' is set
      if (trendingmovies === undefined || trendingmovies === null) {
        throw new Error("Missing the required parameter 'trendingmovies' when calling createtrendingmovies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trendingmovies;
      return this.apiClient.callApi(
        '/trendingmovies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~deletetrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} trendingmoviesId the Id parameter
     * @param {module:api/TrendingmoviesApi~deletetrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetrendingmovies(trendingmoviesId, callback) {
      let postBody = null;
      // verify the required parameter 'trendingmoviesId' is set
      if (trendingmoviesId === undefined || trendingmoviesId === null) {
        throw new Error("Missing the required parameter 'trendingmoviesId' when calling deletetrendingmovies");
      }

      let pathParams = {
        'trendingmoviesId': trendingmoviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trendingmovies/{trendingmoviesId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~getAlltrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trendingmovies>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TrendingmoviesApi~getAlltrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trendingmovies>}
     */
    getAlltrendingmovies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Trendingmovies];
      return this.apiClient.callApi(
        '/trendingmovies/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamstrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~getByParamstrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trendingmovies>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/TrendingmoviesApi~getByParamstrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trendingmovies>}
     */
    getByParamstrendingmovies(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamstrendingmovies");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Trendingmovies];
      return this.apiClient.callApi(
        '/trendingmovies/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~gettrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trendingmovies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} trendingmoviesId the Id parameter
     * @param {module:api/TrendingmoviesApi~gettrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trendingmovies}
     */
    gettrendingmovies(trendingmoviesId, callback) {
      let postBody = null;
      // verify the required parameter 'trendingmoviesId' is set
      if (trendingmoviesId === undefined || trendingmoviesId === null) {
        throw new Error("Missing the required parameter 'trendingmoviesId' when calling gettrendingmovies");
      }

      let pathParams = {
        'trendingmoviesId': trendingmoviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trendingmovies;
      return this.apiClient.callApi(
        '/trendingmovies/{trendingmoviesId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetrendingmovies operation.
     * @callback module:api/TrendingmoviesApi~updatetrendingmoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trendingmovies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} trendingmoviesId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Trendingmovies} opts.trendingmovies data to be updated
     * @param {module:api/TrendingmoviesApi~updatetrendingmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trendingmovies}
     */
    updatetrendingmovies(trendingmoviesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['trendingmovies'];
      // verify the required parameter 'trendingmoviesId' is set
      if (trendingmoviesId === undefined || trendingmoviesId === null) {
        throw new Error("Missing the required parameter 'trendingmoviesId' when calling updatetrendingmovies");
      }

      let pathParams = {
        'trendingmoviesId': trendingmoviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trendingmovies;
      return this.apiClient.callApi(
        '/trendingmovies/{trendingmoviesId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
