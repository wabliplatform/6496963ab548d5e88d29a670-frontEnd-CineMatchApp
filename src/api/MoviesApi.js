/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Movies from '../model/Movies';

/**
* Movies service.
* @module api/MoviesApi
* @version 1.0.0
*/
export default class MoviesApi {

    /**
    * Constructs a new MoviesApi. 
    * @alias module:api/MoviesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createmovies operation.
     * @callback module:api/MoviesApi~createmoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Movies} movies data to be created
     * @param {module:api/MoviesApi~createmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movies}
     */
    createmovies(movies, callback) {
      let postBody = movies;
      // verify the required parameter 'movies' is set
      if (movies === undefined || movies === null) {
        throw new Error("Missing the required parameter 'movies' when calling createmovies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Movies;
      return this.apiClient.callApi(
        '/movies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletemovies operation.
     * @callback module:api/MoviesApi~deletemoviesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} moviesId the Id parameter
     * @param {module:api/MoviesApi~deletemoviesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletemovies(moviesId, callback) {
      let postBody = null;
      // verify the required parameter 'moviesId' is set
      if (moviesId === undefined || moviesId === null) {
        throw new Error("Missing the required parameter 'moviesId' when calling deletemovies");
      }

      let pathParams = {
        'moviesId': moviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/movies/{moviesId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllmovies operation.
     * @callback module:api/MoviesApi~getAllmoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Movies>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/MoviesApi~getAllmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Movies>}
     */
    getAllmovies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Movies];
      return this.apiClient.callApi(
        '/movies/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsmovies operation.
     * @callback module:api/MoviesApi~getByParamsmoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Movies>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/MoviesApi~getByParamsmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Movies>}
     */
    getByParamsmovies(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsmovies");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Movies];
      return this.apiClient.callApi(
        '/movies/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getmovies operation.
     * @callback module:api/MoviesApi~getmoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} moviesId the Id parameter
     * @param {module:api/MoviesApi~getmoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movies}
     */
    getmovies(moviesId, callback) {
      let postBody = null;
      // verify the required parameter 'moviesId' is set
      if (moviesId === undefined || moviesId === null) {
        throw new Error("Missing the required parameter 'moviesId' when calling getmovies");
      }

      let pathParams = {
        'moviesId': moviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Movies;
      return this.apiClient.callApi(
        '/movies/{moviesId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatemovies operation.
     * @callback module:api/MoviesApi~updatemoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} moviesId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Movies} opts.movies data to be updated
     * @param {module:api/MoviesApi~updatemoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movies}
     */
    updatemovies(moviesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['movies'];
      // verify the required parameter 'moviesId' is set
      if (moviesId === undefined || moviesId === null) {
        throw new Error("Missing the required parameter 'moviesId' when calling updatemovies");
      }

      let pathParams = {
        'moviesId': moviesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Movies;
      return this.apiClient.callApi(
        '/movies/{moviesId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
