/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deploys from '../model/Deploys';

/**
* Deploys service.
* @module api/DeploysApi
* @version 1.0.0
*/
export default class DeploysApi {

    /**
    * Constructs a new DeploysApi. 
    * @alias module:api/DeploysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createdeploys operation.
     * @callback module:api/DeploysApi~createdeploysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Deploys} deploys data to be created
     * @param {module:api/DeploysApi~createdeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploys}
     */
    createdeploys(deploys, callback) {
      let postBody = deploys;
      // verify the required parameter 'deploys' is set
      if (deploys === undefined || deploys === null) {
        throw new Error("Missing the required parameter 'deploys' when calling createdeploys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deploys;
      return this.apiClient.callApi(
        '/deploys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedeploys operation.
     * @callback module:api/DeploysApi~deletedeploysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} deploysId the Id parameter
     * @param {module:api/DeploysApi~deletedeploysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedeploys(deploysId, callback) {
      let postBody = null;
      // verify the required parameter 'deploysId' is set
      if (deploysId === undefined || deploysId === null) {
        throw new Error("Missing the required parameter 'deploysId' when calling deletedeploys");
      }

      let pathParams = {
        'deploysId': deploysId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deploys/{deploysId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlldeploys operation.
     * @callback module:api/DeploysApi~getAlldeploysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deploys>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/DeploysApi~getAlldeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deploys>}
     */
    getAlldeploys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deploys];
      return this.apiClient.callApi(
        '/deploys/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsdeploys operation.
     * @callback module:api/DeploysApi~getByParamsdeploysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deploys>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/DeploysApi~getByParamsdeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deploys>}
     */
    getByParamsdeploys(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsdeploys");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deploys];
      return this.apiClient.callApi(
        '/deploys/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdeploys operation.
     * @callback module:api/DeploysApi~getdeploysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} deploysId the Id parameter
     * @param {module:api/DeploysApi~getdeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploys}
     */
    getdeploys(deploysId, callback) {
      let postBody = null;
      // verify the required parameter 'deploysId' is set
      if (deploysId === undefined || deploysId === null) {
        throw new Error("Missing the required parameter 'deploysId' when calling getdeploys");
      }

      let pathParams = {
        'deploysId': deploysId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploys;
      return this.apiClient.callApi(
        '/deploys/{deploysId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatedeploys operation.
     * @callback module:api/DeploysApi~updatedeploysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} deploysId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Deploys} opts.deploys data to be updated
     * @param {module:api/DeploysApi~updatedeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploys}
     */
    updatedeploys(deploysId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deploys'];
      // verify the required parameter 'deploysId' is set
      if (deploysId === undefined || deploysId === null) {
        throw new Error("Missing the required parameter 'deploysId' when calling updatedeploys");
      }

      let pathParams = {
        'deploysId': deploysId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deploys;
      return this.apiClient.callApi(
        '/deploys/{deploysId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
