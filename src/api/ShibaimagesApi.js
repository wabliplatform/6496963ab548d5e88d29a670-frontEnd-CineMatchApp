/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Shibaimages from '../model/Shibaimages';

/**
* Shibaimages service.
* @module api/ShibaimagesApi
* @version 1.0.0
*/
export default class ShibaimagesApi {

    /**
    * Constructs a new ShibaimagesApi. 
    * @alias module:api/ShibaimagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createshibaimages operation.
     * @callback module:api/ShibaimagesApi~createshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shibaimages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Shibaimages} shibaimages data to be created
     * @param {module:api/ShibaimagesApi~createshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shibaimages}
     */
    createshibaimages(shibaimages, callback) {
      let postBody = shibaimages;
      // verify the required parameter 'shibaimages' is set
      if (shibaimages === undefined || shibaimages === null) {
        throw new Error("Missing the required parameter 'shibaimages' when calling createshibaimages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shibaimages;
      return this.apiClient.callApi(
        '/shibaimages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteshibaimages operation.
     * @callback module:api/ShibaimagesApi~deleteshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} shibaimagesId the Id parameter
     * @param {module:api/ShibaimagesApi~deleteshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteshibaimages(shibaimagesId, callback) {
      let postBody = null;
      // verify the required parameter 'shibaimagesId' is set
      if (shibaimagesId === undefined || shibaimagesId === null) {
        throw new Error("Missing the required parameter 'shibaimagesId' when calling deleteshibaimages");
      }

      let pathParams = {
        'shibaimagesId': shibaimagesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shibaimages/{shibaimagesId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllshibaimages operation.
     * @callback module:api/ShibaimagesApi~getAllshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Shibaimages>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/ShibaimagesApi~getAllshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Shibaimages>}
     */
    getAllshibaimages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Shibaimages];
      return this.apiClient.callApi(
        '/shibaimages/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsshibaimages operation.
     * @callback module:api/ShibaimagesApi~getByParamsshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Shibaimages>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/ShibaimagesApi~getByParamsshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Shibaimages>}
     */
    getByParamsshibaimages(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsshibaimages");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Shibaimages];
      return this.apiClient.callApi(
        '/shibaimages/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getshibaimages operation.
     * @callback module:api/ShibaimagesApi~getshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shibaimages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} shibaimagesId the Id parameter
     * @param {module:api/ShibaimagesApi~getshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shibaimages}
     */
    getshibaimages(shibaimagesId, callback) {
      let postBody = null;
      // verify the required parameter 'shibaimagesId' is set
      if (shibaimagesId === undefined || shibaimagesId === null) {
        throw new Error("Missing the required parameter 'shibaimagesId' when calling getshibaimages");
      }

      let pathParams = {
        'shibaimagesId': shibaimagesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shibaimages;
      return this.apiClient.callApi(
        '/shibaimages/{shibaimagesId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateshibaimages operation.
     * @callback module:api/ShibaimagesApi~updateshibaimagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shibaimages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} shibaimagesId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Shibaimages} opts.shibaimages data to be updated
     * @param {module:api/ShibaimagesApi~updateshibaimagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shibaimages}
     */
    updateshibaimages(shibaimagesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['shibaimages'];
      // verify the required parameter 'shibaimagesId' is set
      if (shibaimagesId === undefined || shibaimagesId === null) {
        throw new Error("Missing the required parameter 'shibaimagesId' when calling updateshibaimages");
      }

      let pathParams = {
        'shibaimagesId': shibaimagesId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shibaimages;
      return this.apiClient.callApi(
        '/shibaimages/{shibaimagesId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
